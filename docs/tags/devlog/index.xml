<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Devlog on Epsi&#39;s Den</title>
        <link>https://epsirho.com/tags/devlog/</link>
        <description>Recent content in Devlog on Epsi&#39;s Den</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 08 Mar 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://epsirho.com/tags/devlog/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Melon Media Server Devlog 2</title>
        <link>https://epsirho.com/p/mms-dl2/</link>
        <pubDate>Fri, 08 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://epsirho.com/p/mms-dl2/</guid>
        <description>&lt;img src="https://epsirho.com/p/mms-dl2/ScannerBanner.png" alt="Featured image of post Melon Media Server Devlog 2" /&gt;&lt;p&gt;I have been working really hard on melon the past month, and it&amp;rsquo;s getting close to V1 being feature complete! I&amp;rsquo;ve worked on lots of things, but for this post I wanted to talk about the scanner. The last time I talked about Melon the scanner was working but really slow. Especially on my HDD. So I spent awhile looking for optimizations and eventually ended up rewritting the scanner, which I&amp;rsquo;ve called Scanner V2.&lt;/p&gt;
&lt;p&gt;The old scanner worked like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load a track off the disk&lt;/li&gt;
&lt;li&gt;Call the database to find out if the track&amp;rsquo;s artist or album exists yet&lt;/li&gt;
&lt;li&gt;If they do, update their info to include the new track, otherwise create new artist / album&lt;/li&gt;
&lt;li&gt;Insert all the new info into the dabase&lt;/li&gt;
&lt;li&gt;Repeat for each track&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new scanner has multiple passes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load tracks
&lt;ul&gt;
&lt;li&gt;Read track info off the disk&lt;/li&gt;
&lt;li&gt;Create a track object and add into a thread safe List (more on that later)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Fill out database objects
&lt;ul&gt;
&lt;li&gt;Create album objects based on found tracks&lt;/li&gt;
&lt;li&gt;Create artist objects based on found tracks&lt;/li&gt;
&lt;li&gt;Update track info to link to new album and artists objects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Upload to database
&lt;ul&gt;
&lt;li&gt;Uploads all the in memory info into the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delete
&lt;ul&gt;
&lt;li&gt;Remove tracks, albums, artists that are missing from the disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keeping things in memory sped things up a ton. For the 4607 files on my SSD, it takes about 10-15 seconds. The old scanner took around 3 minutes 30 seconds.
I was also able to enable loading multiple files at a time with the thread-safe ConcurrentDictionary type. Super useful, but only really works on my SSD. On the HDD it takes longer to load in the file, so the threads get backed up (to a max of 25).&lt;/p&gt;
&lt;p&gt;Only a few more things to do for the scanner now. I plan on adding genre merging, because I have a lot of tracks that have genres like Drum and Bass, Drum n Bass, DnB, where they are all the same genre, just written down differently. But they show up as two different genres in the db. So I&amp;rsquo;d like a way to &amp;ldquo;Canonicalize&amp;rdquo; genres into one.&lt;/p&gt;
&lt;h3 id=&#34;scanner-v2-demo&#34;&gt;Scanner V2 Demo&lt;/h3&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/4HfW5eiE3tk&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

</description>
        </item>
        <item>
        <title>Melon Media Server Devlog 1</title>
        <link>https://epsirho.com/p/mms-dl1/</link>
        <pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://epsirho.com/p/mms-dl1/</guid>
        <description>&lt;img src="https://epsirho.com/p/mms-dl1/mms-3.png" alt="Featured image of post Melon Media Server Devlog 1" /&gt;&lt;p&gt;For the last 2 years I&amp;rsquo;ve been acquiring songs I like in as high quality as I can find and saving them locally. I wanted to have my own stash of music so I wouldn&amp;rsquo;t loose access to the songs that mean the most to me. I&amp;rsquo;ve been using Plex to listen to my local library ever since, but Plex has so many issues that bother me. I&amp;rsquo;ve looked into other options like Jellyfin, but all the big media servers seem to have tacked on music as an after thought. I want it to be better and I want more control. So now I&amp;rsquo;m making Melon, the music focused media player.&lt;/p&gt;
&lt;p&gt;This project started in May of 2023, with an experimental scanner. I toyed with lots of options for databases, along with what to store and how. I ended up with MongoDB, as it&amp;rsquo;s json-like document system is super powerful for this use case. The Melon Scanner combs recursively through the folders you specify logging every music file and .lrc file. It gets the track information from the music file metadata, so you&amp;rsquo;ll want to use a tool like &lt;a class=&#34;link&#34; href=&#34;https://picard.musicbrainz.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MusicBrainz Picard&lt;/a&gt;. MusicBrainz&amp;rsquo;s data is what I&amp;rsquo;m modeling off of, so support for it&amp;rsquo;s metadata tags will be in Melon. Below is an example of a Track in the db.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://epsirho.com/p/mms-dl1/mms-1.png&#34;
	width=&#34;351&#34;
	height=&#34;813&#34;
	srcset=&#34;https://epsirho.com/p/mms-dl1/mms-1_hu48805c5d947e1a7ba7841c5f78fed65a_87780_480x0_resize_box_3.png 480w, https://epsirho.com/p/mms-dl1/mms-1_hu48805c5d947e1a7ba7841c5f78fed65a_87780_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;A Track object from Melon&amp;rsquo;s MongoDB databse&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;43&#34;
		data-flex-basis=&#34;103px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After getting it mostly working (it didn&amp;rsquo;t actually, I&amp;rsquo;ve had to fix that scanner code a million times later) I created a nice UI to allow for initial setup and control of the database. This UI has gone through many stages but I&amp;rsquo;m really happy with the current result. A headless mode also exists now if you don&amp;rsquo;t want to run with the UI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://epsirho.com/p/mms-dl1/mms-2.png&#34;
	width=&#34;1099&#34;
	height=&#34;184&#34;
	srcset=&#34;https://epsirho.com/p/mms-dl1/mms-2_hu334531e1121cc74fddb92e662b5debd0_22021_480x0_resize_box_3.png 480w, https://epsirho.com/p/mms-dl1/mms-2_hu334531e1121cc74fddb92e662b5debd0_22021_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;A screenshot of Melon&amp;rsquo;s scanner progress view&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;597&#34;
		data-flex-basis=&#34;1433px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve since started learning ASP.NET and creating a web API for clients to interact with. I&amp;rsquo;ve got lots of work done, and most of the main endpoints such as search, playlists, and play statistics are all pretty much done. But i&amp;rsquo;ve got quite a few more things to finish. Currently I&amp;rsquo;m working on endpoints to allow updating track/album/artist info, but I&amp;rsquo;ve also got endpoints like recommendations, ratings, and user friending to get done. The project is awhile off, probably a few more months to finish the server.&lt;/p&gt;
&lt;p&gt;I plan on creating a Windows and iOS application for v1 release. I&amp;rsquo;d also like other Apple device apps like MacOS and tvOS. I don&amp;rsquo;t own an android phone, so I&amp;rsquo;m not creating an app for it myself. A friend of mine has been working on one at the same time as I&amp;rsquo;m creating the server, which has been a huge help in testing and modeling how things will work. In the end, I want it to be accessible for any developer to make apps for melon if they&amp;rsquo;d like.&lt;/p&gt;
&lt;p&gt;All my previous projects have been open source and free, however I&amp;rsquo;m trying to think of a good way to make some money from this project. It&amp;rsquo;s taken so much effort and I&amp;rsquo;m really proud of it, and I think it&amp;rsquo;ll be worth the price. So the plan right now is the Melon server code will be open and anyone can grab a build of the server to spin up themselves, but the apps will either be paid, have a free trial, or have some features locked behind a pro version. I&amp;rsquo;ve thought about making the code for the apps open too, so if you don&amp;rsquo;t want to pay or just want to try it out first, you can build it yourself. I&amp;rsquo;m not set on any of these ideas, nor the price. I do know that it will NOT be a subscription, just a one time payment.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll talk more about features and pricing when the time comes. I mostly wanted to make this blog post to show I&amp;rsquo;m alive and working on something big. I&amp;rsquo;ll likely post more devlogs here and there, and I&amp;rsquo;ll announce on my socials when it&amp;rsquo;s time for release!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
