[{"Name":"C++ UIKit","AnnounceDate":"2020-09-16T00:00:00","ImageURL":"/images/cppukitheader.png","PostURL":"cppuikit","ShortDescription":"A C++ library for making quick and simple console UIs.","Description":"This was a fun project I worked on to help me prototype console tools quicker and allow me to make them look and feel nice. I worked on it from Sept 2020 to Feb 2021. It was made for windows, and while some features might work on other operating systems a few will certainly not, such as the cursor menu.\n\nFull documentation is available as well as a demo application that showcases many of the features. You can find both of those things on the Github Repo.\n","Tags":["Library","C++","Console","Windows"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/UIKit"}]},{"Name":"Epsi's Den","AnnounceDate":"2024-12-16T00:00:00","ImageURL":"/images/aboutbanner.png","PostURL":"DenWebsite","ShortDescription":"The website you're on right now!","Description":"This is the all new version of my website, V3, with custom styling and C# backend tools for making post and project pages from markdown. I've also massively redone my Music Recommendations page to showcase my recommendations better, with better links to listen to them, and more backend tools in C# to quickly add and manage recommendations.\n\nThere are also some easter eggs to find, like a hidden page. \n","Tags":["HTML","CSS","JS","C#"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/EpsiRho.github.io"}]},{"Name":"Discord Data Package Explorer","AnnounceDate":"2022-04-20T00:00:00","ImageURL":"/images/discorddpeheader.png","PostURL":"discorddpe","ShortDescription":"A simple way to view the data inside your discord data package.","Description":"This is a small little application to view the information stored in a Discord Data Package. This is to help users easily explore the data discord has on them, as it can be hard for normal users to comb through large text and json files.\n\nYou can find the code and application downloads on GitHub\n\nUpdate: Pushed v1.0.1 to fix an odd COM related crash in newer Win11 versions.\n","Tags":["WASDK","Windows","C#","Discord"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/Discord-Data-Package-Explorer"}]},{"Name":"E621 C# Library","AnnounceDate":"2021-03-19T00:00:00","ImageURL":"/images/e6apiheader.png","PostURL":"e6api","ShortDescription":"A wrapper around many of the e621.net api endpoints.","Description":"This was made while I was learning REST API development for the first time. I picked the e621 API for the funny and because it’s auth and rate-limits were relaxed and easy to start with. This later went on to be used in Fluff, which was my first attempt at a good looking UI application. I hosted it on nuget to make it easier to use in my projects, and for some reason it has 11k+ downloads xP\n\nYou can find the code on GitHub and the built library on nuget. Documentation for this is incomplete and I’ll likely not revisit it!\n","Tags":["Library","C#","NSFW"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/E621-C-Sharp-Api-Wrapper"},{"Name":"Nuget","Link":"https://www.nuget.org/packages/e6API_EpsiRho"}]},{"Name":"FFTVIS","AnnounceDate":"2025-06-29T00:00:00","ImageURL":"/images/fftvisheader.png","PostURL":"fftvis","ShortDescription":"A file format that stores a pre generated frequency spectrum for visualizing audio files.","Description":"The FFTVIS file format is a compacted representation of a pre generated frequency spectrum for visualizing audio files. It's a simple format at it's base: a header describing the generation and how to play it back properly, and an array of arrays of doubles from 0->1 representing the amplitude of a frequency bin. It supports 3 extra encoding steps for compression: ZSTD 3, Delta Encoding, and Quantization (to 16 or 8 bit). Check out the Blog Post for more info about the development of this project! \n\nThis project was a bitch and a blast to work on haha. I love visualizing data and audio always looks so cool. Currently FFTVIS Version 2 supports Normalized, Mel, and Log10 representations of the audio spectrum in mono. In the future, I'd love to try and extend a version 3 with support for dual channel frames for left and right audio spectrum visualizations, and since bin mapping can be swapped out for any function, I'd like to add support to the library for setting custom bin maps sometime soon. But I've been working my ass off for this and done lots of research and writing, and I can't scope creep forever if I want this to ever release xP\n\nExtra Notes:\nVersion 2 was the release version. Version 1 used grouped compression stages, so you could only select None, Zstd, Zstd+Quant, Zstd+Quant+Deltas. Version 2 moved to a bitmask to enable toggling,\n\nThe library doesn't have explicit support for swapping to a custom bin map, but the file format is agnostic to it. If you were to edit the library or build your own custom frame builder, as long as you save it out the way the format expects it (frames of 0-1) then it should work just fine.\n\nYou should really try to lock your timer to the audio player's position. Attempting to run two timers in sync will just be a pain in ass.\n\nFFT Values of more 32k+, unless using audio with a high sample rate (88, 96, 129), will not look correct. This is because it takes up too much time inside each frame, averaging too much of the song at once to be accurate to the audio being played at that moment.\n\n\n","Tags":["Windows","C#","Audio","Library","Data Visualization","FVZ"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/FFTVIS"},{"Name":"Blog Post","Link":"https://epsirho.com/posts/fft-blog"}]},{"Name":"Fluff","AnnounceDate":"2022-02-13T00:00:00","ImageURL":"/images/fluffprojheader.png","PostURL":"fluff","ShortDescription":"An e621.net client for Windows 10/11","Description":"A beautiful, native windows app for e926/e621! View, search, and download posts submitted by other users, and submit your own.\n\nThis was a fun project I used to deep dive into learning UWP and making better UIs. It got pretty far along, but I’ll likely no longer be updating it. It does still mostly work despite a few bugs, I may go fix them at some point but I don’t plan to. I’m pretty proud of the result, especially the custom control behavior I made for the upload page.\n\nIf you want to check this out, it’s available on GitHub and the Microsoft Store. Don’t worry, it starts in safe mode! You have to enable NSFW content in the settings if that’s what you’re looking for :P\n","Tags":["UWP","Windows","C#","NSFW","Furry"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/Fluff"},{"Name":"Microsoft Store","Link":"https://apps.microsoft.com/detail/9NJRHG6FVKL9?rtc=1&hl=en-us&gl=US"}]},{"Name":"FreakFreq","AnnounceDate":"2025-06-29T00:00:00","ImageURL":"/images/freqfreakheader.png","PostURL":"FreqFreak","ShortDescription":"A super customizable audio visualizer for windows!","Description":"FreqFreak is an application made in WPF that can take in audio from WASAPI loopback for output, input, and per process id and show it with pretty and customizable audio visualizations. Tons of options, multiple built in bin mappings, easy saving/loading of config files, and many color/size/shape customizations for the spectrum. This was a labor of love as someone who grew up placing visualizers into my desktop backgrounds using Rainmeter way back in the day. As Rainmeter seems to be mostly out of fashion and many of it's popular visualizers now being broken or dead in some way, I wanted a new way to make visualizations on my PC. You can read more about the dev process and the how it works on the Blog Post! It's all free, as is it's codebase. Feel free to add / fix things or use it to build up your own visualizing systems :D\n\nChangelog:\nv2.0.12\n- You can now toggle pitch + frequency peak tracking\n- Fixed Outer Circle and Inner Circle modes not showing peaks unless in stereo mode.\n\nv2.0.11\n- The AudioDevices window crash due to a weak reference to it's Dispatcher has been fixed\n- The Lines in centered mode were being drawn incorrectly on the right side with 2 stray points, these points are now gone\n- The Cutouts can now use the arrow keys for nudging just like the main Visualizer.\n- PathGeometry Memory Leak fixed\n- Line Brush Memory Leak fixed\n- Color system is now more performant\n\nv2.0.10\n- Dual Channel visualizations \n    - Add Left Channel/Right Channel/Stereo/Mono selector \n    - Add Oscilloscope Visualization (Stereo Mode only) \n    - Stereo Mode for Centered\n    - Stereo Mode for Inner/Outer Circle\n- Add Pitch Tracking + Color effect \n    - Current Pitch Guess + Note Guess + Peak Frequency Guess in the Options Window\n    - Pitch color modes show the current pitch guess as a color on the gradient between color 1-2 or a rainbow gradient.\n    - Frequency color modes show the current frequency peak guess as a color on the gradient between color 1-2 or a rainbow gradient.\n    - Pitch/Peak guess is ONLY SEMI ACURATE, and can become more or less accurate depending on your FFT settings. It is also based off a mono representation of the audio in stereo mode, although in left/right exclusive modes it will base of the specified channel.\n- Revamped Color Modes\n    - Single Color \n    - Dual Color Gradient Vertical, Horizontal, Height, Pitch, or Frequency\n    - Custom N-Color Gradient Vertical, Horizontal, Height, Pitch, or Frequency \n        - To support custom gradients, a new Gradient Editor was added with some presets \n- New Visualization Options + Modes\n    - Show As Lines shows the bars as points on a line(s) instead of bars\n    - Peaks now have a selector for mode:\n        - Off, Peak Bars, Peak Lines, Peak Bars Only, Peak Lines Only\n        - Low End Dampen lets you control how much to dampen the bass compared to the rest of the spectrum, since bass can often be overpowering in audio. The new default is 1.17 (from 1 aka no dampening)\n    - Bass Reactive Scaling + Bass Reactive Shake\n- Tray Icon Additions\n    - Open New Instance\n    - Quick Import\n    - Quick Access to Audio Input Switcher \n    - Pause/Play Visualization\n- Options Menu Buttons moved from bottom to top, and a few new buttons added \n    - Play/Pause (Stops the visualizer from getting new audio data)\n    - New Instance (Opens a new visualizer instance)\n    - Recenter (Brings the visualizer to be centered on the Options Window)\n    - Export\n    - Import\n    - Audio Input Settings\n    - FVZ Tool\n    - Cutout Tool\n- Cutout Tool lets you place images anywhere on screen\n    - Can be used to place images as decoration, or to cover up parts of the screen.\n    - For example, cutting out the subject of the desktop background, and placing it's cutout overtop the visualizer, to give it depth.\n    - Can also be Bass Reactive\n- Optimization Pass\n    - Visualizations are now spread out across more threads: \n    - Audio comes in and is built into frames on it's own thread on the CPU, while another CPU threads preps the window and takes those audio frames and turns them into GPU ready frames.\n    - The GPU now handles rendering the visuals, improving FPS and making the maximum settings you can get away with larger.\n    - The Options Window and it's subsequent windows are now given their own UI threads, instead of piggy backing off of the visualizer's. This means they no longer lock up when the visualizer lags now.\n- Audio Switcher can now be refreshed without reopening it\n- New Dark + Transparent style \n    - Windows will now try and open out of the way of other FreqFreak Windows (to the top/left/right/bottom)\n    - Accent + Tray icon color is now more consistently colorful\n- Keyboard nudging (you can use your arrow keys to nudge the selected visualizer window by 1 pixel for precise alignment) \n\nv1.1.0\n- Added a Rotation parameter\n- Fixed circle visualizers sizing their canvas oddly\n- Added version number to Options UI\n","Tags":["Windows","C#","Audio","WPF","Data Visualization","FVZ"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/FreqFreak"},{"Name":"Blog Post","Link":"https://epsirho.com/posts/fft-blog"},{"Name":"Microsoft Store","Link":"https://apps.microsoft.com/detail/9n44td8gbw16"}]},{"Name":"Horizon File Transfer","AnnounceDate":"2020-12-28T00:00:00","ImageURL":"/images/hrznftpheader.png","PostURL":"horizonftp","ShortDescription":"A UWP app for transferring files PTP.","Description":"This was the first real app I developed. I started the project because at the time, Discord’s upload limit was 8mb and that was never enough to send files to my friends. So I created horizon to give me infinite upload limit and allow easy transfers to my contacts.\n","Tags":["UWP","C#","Windows"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/Horizon?tab=readme-ov-file"},{"Name":"Microsoft Store","Link":"https://apps.microsoft.com/detail/9NLF1LS7Q6J6?hl=en-US&gl=US"}]},{"Name":"Wordle Offline","AnnounceDate":"2022-01-09T00:00:00","ImageURL":"/images/wordleofflineheader.png","PostURL":"wordleoffline","ShortDescription":"A recreation of Wordle in WASDK.","Description":"I made this project cause I was having fun with wordle and wanted to play more than once a day. It’s pretty simple, works the same as the Wordle website does.\n","Tags":["WASDK","Windows","C#","Games"],"Links":[{"Name":"Github","Link":"https://github.com/EpsiRho/Wordle-Offline"}]}]